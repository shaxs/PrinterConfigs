#####################################################################
#                                                                   #
#      Main Macros File                                             #
#                                                                   #
#####################################################################
# This file contains the primary gcode macros for the printer,
# including startup, shutdown, and utility commands.
#
# Commenting Convention:
# ; for G-code line comments
# # for configuration comments

[gcode_macro filament_material]
description: "Stores the last used filament type as a persistent variable."
variable_type: "PLA" # The default value if no material is specified.
gcode:
    # This macro acts as a container for the 'type' variable.
    # It is updated by PRINT_START and saved by PRINT_END.
    # Access the variable in other macros with: 
    # printer['gcode_macro filament_material'].type

[gcode_macro PARK]
description: "Parks the toolhead at the center of the bed."
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30 F6000

[gcode_macro G32]
description: "Performs a full bed leveling procedure."
gcode:
    BED_MESH_CLEAR          ; Clear any existing bed mesh
    G28                     ; Home all axes
    QUAD_GANTRY_LEVEL       ; Level the gantry
    G28                     ; Re-home all axes after leveling
    G0 X87.5 Y90 Z30 F3600   ; Move to a safe standby position

[gcode_macro PRIME]
description: "Prints a prime line to purge the nozzle."
gcode:
    {% set x_mid = printer.toolhead.axis_maximum.x|float / 2 %}
    G0 X{x_mid - 50} Y4 F10000   ; Go to starting point
    G0 Z0.4                     ; Move nozzle to a low height
    G91                         ; Set to incremental positioning
    G1 X100 E20 F1000           ; Print the prime line
    G90                         ; Return to absolute positioning

# This is a macro for testing and can be removed if not needed.
[gcode_macro testy]
gcode:
    #G4 P{printer["gcode_macro _PRINTER_SETTINGS"].prepurge_dwell * 1000}
    #RESPOND TYPE=echo MSG="dwelling"
    #RESPOND TYPE=echo MSG='{"Move is  %d" % (tilt_height)}'
    #RESPOND PREFIX=ðŸ’¨ MSG=" {planeCfg} {planeCMD} "

[gcode_macro _set_status]
description: "Internal macro to set the printer's status LED and console message."
gcode:
    # This macro takes a STATE parameter and optionally a MSG parameter.
    # It first prints a status message to the console, then it attempts
    # to run another macro with the same name as the STATE parameter.
    # For example, _set_status STATE=status_heating will print "----< status heating"
    # and then run the [gcode_macro status_heating].

    ; Set local variables for the STATE and MSG parameters, using "none" as a default
    {% set prt_state = params.STATE|default("none") %}
    {% set prt_msg   = params.MSG  |default("none") %}

    ; Check if the [respond] module is enabled in Klipper before trying to send a message
    {% if printer.configfile.settings.respond is defined %}
        ; Check if a custom message (MSG) was provided
        {% if prt_msg == 'none' %}
            ; If no custom message, create one from the STATE, replacing underscores with spaces
            RESPOND MSG='{"----< %s" % (prt_state|replace("_", " "))}'
        {% else %}
            ; If a custom message was provided, print it directly
            RESPOND MSG='{"----< %s" % (prt_msg)}'
        {% endif %}
    {% endif %}

    ; Check if a gcode_macro exists with the same name as the STATE parameter
    {% if printer["gcode_macro %s" % (prt_state)] is defined %}
        ; If it exists, execute that macro (e.g., run the status_heating macro)
        {prt_state} 
    {% endif %}


# This delayed gcode macro turns off specific fans after a timer,
# which is typically scheduled at the end of a print or after a cooldown.
[delayed_gcode delayed_fan_shutoff]
initial_duration: 0    ; This prevents the macro from running automatically when Klipper starts.
gcode:
    RESPOND MSG='{"----< delayed fan shutoff active"}' ; Notify the user that the fans are being turned off.

    ; Check if an MCU fan is defined in the configuration.
    {% if printer['fan_generic mcu'] is defined %}
        SET_FAN_SPEED FAN=mcu SPEED=0 ; If it exists, turn it off.
    {% endif %}

    ; Check if Skirt_Fans are defined in the configuration.
    {% if printer['fan_generic Skirt_Fans'] is defined %}
        SET_FAN_SPEED FAN=Skirt_Fans SPEED=0 ; If they exist, turn them off.
    {% endif %}

    ; Check if Bed_Fans are defined in the configuration.
    {% if printer['fan_generic Bed_Fans'] is defined %}
        SET_FAN_SPEED FAN=Bed_Fans SPEED=0 ; If they exist, turn them off.
    {% endif %}
    
# This delayed gcode macro provides a slow, gradual cooldown for the heated bed.
# It is designed to be called recursively to step down the temperature over time,
# preventing high-shrinkage materials like ABS from warping.
[delayed_gcode GRADUAL_COOLDOWN]
gcode:
    ; --- Check if the bed is still hot enough to require gradual cooling ---
    {% if printer.heater_bed.temperature > 80 %}
        ; If the bed is still above 80C, continue the cooldown loop.
        RESPOND MSG='{"----< cooling bed, current temp: %s c" % printer.heater_bed.temperature|round(1)}'
        M140 S{ printer.heater_bed.target - 5 }     ; Set the bed temperature target 5C lower.
        UPDATE_DELAYED_GCODE ID=GRADUAL_COOLDOWN DURATION=300 ; Schedule this macro to run again in 5 minutes.

    {% else %}
        ; --- If the bed is at or below 80C, exit the loop and perform final shutdown ---
        RESPOND MSG='{"----< gradual bed cooling complete"}'
        M104 S0                                     ; Turn off hotend heater.
        M140 S0                                     ; Turn off bed heater.
        _TOOLHEAD_PARK_PAUSE_CANCEL                 ; Park the toolhead in its designated spot.
        M84                                         ; Disable all stepper motors.
        UPDATE_DELAYED_GCODE ID=delayed_fan_shutoff DURATION=600 ; Schedule the electronics fans to turn off in 10 minutes.
    {% endif %}

# This macro moves the toolhead through a sequence of motions
# to prevent flat spots from forming on the belts when the
# printer is left idle for a long period of time.
[gcode_macro RELAX_BELTS]
description: "Moves the toolhead around to relax the belts."
gcode:
    G90                                         ; set to absolute positioning
    {% set th = printer.toolhead %}             ; get toolhead dimensions
    {% set margin = 10 %}                       ; set a 10mm margin from the edges

    ; --- Begin Relaxation Moves ---
    G0 Z50                                      ; move z up to a safe height
    
    ; Move diagonally to exercise both belts together
    G0 X{th.axis_maximum.x - margin} Y{th.axis_maximum.y - margin} F6000 
    G0 X{th.axis_minimum.x + margin} Y{th.axis_minimum.y + margin} F6000 
    G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2} F6000

    ; Move along the X-axis
    G0 X{th.axis_minimum.x + margin} F6000
    G0 X{th.axis_maximum.x - margin} F6000
    G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2} F6000

    ; Move along the Y-axis
    G0 Y{th.axis_minimum.y + margin} F6000
    G0 Y{th.axis_maximum.y - margin} F6000

    ; Return to center
    G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2} F6000

[gcode_macro PRINT_START]
description: "The primary macro to begin a print, performing all startup procedures."
gcode:
    ; --- Gather all parameters from slicer, using defaults if not provided ---
    {% set macro_park  = params.PARKMACRO |default(printer["gcode_macro _PRINTER_SETTINGS"].macro_park ) %}
    {% set macro_purge = params.PURGEMACRO|default(printer["gcode_macro _PRINTER_SETTINGS"].macro_purge) %}
    {% set temp_bed    = params.BED       |default(  0)|float %}
    {% set temp_he     = params.HOTEND    |default(205)|float %}
    {% set temp_probe  = params.PROBETEMP |default(150)|int %}
    {% set do_mesh     = params.MESH      |default(99)|int %}
    {% set material    = params.MATERIAL|default(printer['gcode_macro filament_material'].type)|string %}
    {% set chamber_temp_slicer = params.CHAMBER|default(None) %}

    ; --- Update and report persistent variables ---
    SET_GCODE_VARIABLE MACRO=filament_material VARIABLE=type VALUE='"{material}"'
    RESPOND MSG='{"----< material type set to: %s" % material|lower}'
    
    ; --- Begin Print Start Sequence ---
    UPDATE_DELAYED_GCODE ID=delayed_fan_shutoff DURATION=0 ; cancel any previous fan shutoff timers
    {% if printer["gcode_macro _SET_MPC_MATERIAL"] is defined %}
        _SET_MPC_MATERIAL MATERIAL={material} ; set model predictive control for the filament
    {% endif %}

    _set_status STATE="status_busy"
    CLEAR_PAUSE
    BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0
    M107 ; turn off part cooling fan

    ; Turn on electronics and enclosure fans, if they exist
    {% if printer['fan_generic mcu'] is defined %}
        SET_FAN_SPEED FAN=mcu SPEED=1.0
        RESPOND MSG='{"----< fan mcu on"}'
    {% else %}
        RESPOND MSG='{"----< fan mcu not defined"}'
    {% endif %}
    {% if printer['fan_generic Skirt_Fans'] is defined %}
        SET_FAN_SPEED FAN=Skirt_Fans SPEED=1.0
        RESPOND MSG='{"----< fan skirt on"}'
    {% else %}
        RESPOND MSG='{"----< fan skirt not defined"}'
    {% endif %}

    ; --- Universal Chamber Light On ---
    {% if printer['neopixel Chamber_Light'] is defined %}
        SET_LED LED=Chamber_Light RED=1.0 GREEN=1.0 BLUE=1.0
    {% endif %}
    {% if printer['output_pin Chamber_Light'] is defined %}
        SET_PIN PIN=Chamber_Light VALUE=1
    {% endif %}

    ; Start heating the bed and pre-heating the nozzle for probing
    M140 S{temp_bed}
    M104 S{temp_probe}
    G4 P3000
    
    ; Home the printer
    _set_status STATE="status_homing"
    {% if 'x' not in printer.toolhead.homed_axes or 'y' not in printer.toolhead.homed_axes %}
        G28 X Y
    {% endif %}
    G28 Z

    ; Wait for bed to reach full temperature
    {% if temp_bed != 0 %} 
        _set_status STATE="status_heating"
        M190 S{temp_bed}
        G0 Z20
    {% endif %}
    
    ; --- Turn on bed fans for high-temp prints, if they exist ---
    {% set bed_fan_temp = printer["gcode_macro _CLIENT_VARIABLE"].bed_fan_on_temp|default(999)|int %}
    {% if temp_bed >= bed_fan_temp and printer['fan_generic Bed_Fans'] is defined %}
        RESPOND MSG='{"----< high temp print detected, turning on bed fans"}'
        SET_FAN_SPEED FAN=Bed_Fans SPEED=1.0
    {% endif %}

    ; --- Perform Heat Soak based on material type ---
    {% set chamber_config = printer['gcode_macro _CHAMBER_SETTINGS'] %}
    {% if chamber_config and chamber_config.enabled|lower == 'true' and printer['temperature_sensor Chamber'] is defined %}
        ; Check if a specific chamber temp was passed from the slicer AND is greater than 0
        {% if chamber_temp_slicer is not none and chamber_temp_slicer|int > 0 %}
            HEATSOAK TEMP={chamber_temp_slicer}
        ; If not, check if the material type is in our heatsoak list
        {% else %}
            {% set soak_materials_string = "," ~ (chamber_config.heatsoak_materials | lower | replace(' ', '')) ~ "," %}
            {% set current_material_string = "," ~ (material | lower) ~ "," %}
            {% if current_material_string in soak_materials_string %}
                HEATSOAK ; Call with no parameters to use the defaults
            {% endif %}
        {% endif %}
    {% endif %}

    ; Set the Z height for gantry/bed leveling moves
   # {% set tilt_height = 20 %}
    {% if printer.configfile.settings.scanner is defined %}
        {% set tilt_height = 2 %}
    {% elif printer.configfile.settings.z_tilt is defined %}
        {% set tilt_height = printer.configfile.settings.z_tilt.horizontal_move_z %}
    {% elif printer.configfile.settings.z_tilt_ng is defined %}
        {% set tilt_height = printer.configfile.settings.z_tilt_ng.horizontal_move_z %}
    {% elif printer.configfile.settings.quad_gantry_level is defined %}
        {% set tilt_height = printer.configfile.settings.quad_gantry_level.horizontal_move_z %}
    {% endif %}

    ; Perform gantry or bed leveling
    {% if printer.configfile.settings.quad_gantry_level is defined %}
        {% if not printer.quad_gantry_level.applied %} 
            QUAD_GANTRY_LEVEL HORIZONTAL_MOVE_Z=20 RETRY_TOLERANCE=1 PROBE_SPEED=15 LIFT_SPEED=7
        {% endif %}
        QUAD_GANTRY_LEVEL HORIZONTAL_MOVE_Z={tilt_height}
    {% elif printer.configfile.settings.z_tilt is defined %}
        {% if not printer.z_tilt.applied %}
            Z_TILT_ADJUST HORIZONTAL_MOVE_Z=20 RETRY_TOLERANCE=1 PROBE_SPEED=15 LIFT_SPEED=7
        {% endif %}
        Z_TILT_ADJUST HORIZONTAL_MOVE_Z={tilt_height}
    {% elif printer.configfile.settings.z_tilt_ng is defined %}
        {% if not printer.z_tilt_ng.applied %}
            Z_TILT_ADJUST HORIZONTAL_MOVE_Z=20 RETRY_TOLERANCE=1 PROBE_SPEED=15 LIFT_SPEED=7
        {% endif %}
        Z_TILT_ADJUST HORIZONTAL_MOVE_Z={tilt_height}
    {% endif %}

    ; Create the bed mesh
    {% if do_mesh == 0 %}
        RESPOND MSG='{"----< mesh disabled"}'
    {% else %} 
        _set_status STATE="status_meshing"
        {% if do_mesh == 1 %}
            BED_MESH_CALIBRATE
        {% else %}
            BED_MESH_CALIBRATE ADAPTIVE=1
        {% endif %}
    {% endif %}
    
    ; Clean the nozzle if a brush is configured and enabled
    {% if printer['gcode_macro _BRUSH_SETTINGS'] and printer['gcode_macro _BRUSH_SETTINGS'].enabled|lower == 'true' %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel}
        _set_status STATE="status_cleaning"
        CLEAN_NOZZLE
    {% endif %}

    ; Calibrate Z-offset if using Cartographer, otherwise re-home Z
    {% if printer.configfile.settings.scanner is defined %}
        {% if printer.extruder.temperature < temp_probe * 0.95 %}
            {% if printer["gcode_macro %s" % (macro_park)] is defined %}
                {macro_park}
            {% endif %}
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp_probe}
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp_probe}
        {% endif %}
        _set_status STATE="status_calibrating_z"
        {% if printer.configfile.settings.bed_mesh.zero_reference_position is defined %}
            G90
            G0 Z20
        {% endif %}
        CARTOGRAPHER_TOUCH SPEED=2 FUZZY=2
    {% else %}
        G28 Z
    {% endif %}

    ; Heat nozzle to final printing temperature and wait
    _set_status STATE="status_heating"
    {% if printer["gcode_macro %s" % (macro_park)] is defined %}
        {macro_park}
    {% endif %}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp_he}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp_he}

    ; Run the purge line routine
    _set_status STATE="status_printing"
    {% if macro_purge != 'none' %}
        {macro_purge}
    {% endif %}





[gcode_macro PRINT_END]
description: "The primary macro to end a print, with smart cooldown logic."
gcode:
    M400                                        ; wait for moves to finish

    ; --- Retract filament to prevent oozing ---
    {% set retract_dist = printer["gcode_macro _CLIENT_VARIABLE"].cancel_retract|default(5.0)|float %}
    {% set retract_spd = printer["gcode_macro _CLIENT_VARIABLE"].speed_retract|default(30.0)|float %}
    G91                                         ; use relative positioning
    G1 E-{retract_dist} F{retract_spd * 60}     ; retract filament
    G90                                         ; return to absolute positioning

    ; --- Clean the nozzle if enabled ---
    {% if printer['gcode_macro _BRUSH_SETTINGS'] and printer['gcode_macro _BRUSH_SETTINGS'].enabled|lower == 'true' %}
        _set_status STATE="status_cleaning"
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel}
        CLEAN_NOZZLE
    {% endif %}
    
    ; --- Park the toolhead ---
    _TOOLHEAD_PARK_PAUSE_CANCEL
    RESPOND MSG='{"----< toolhead parked"}'
    RESPOND MSG='{"----< print ended"}'
    
    ; --- Conditional Cooldown Logic ---
    {% set bed_temp_threshold = 85 %}
    {% if printer.heater_bed.target >= bed_temp_threshold %}
        RESPOND MSG='{"----< high temp bed detected, starting gradual cooldown"}'
        UPDATE_DELAYED_GCODE ID=GRADUAL_COOLDOWN DURATION=1  ; begin gradual cooldown for ABS, etc.
    {% else %}
        RESPOND MSG='{"----< low temp bed detected, performing standard shutdown"}'
        M104 S0                                     ; turn off hotend
        M140 S0                                     ; turn off bed
        M84                                         ; disable motors
        UPDATE_DELAYED_GCODE ID=delayed_fan_shutoff DURATION=600 ; schedule fan off for standard shutdown
    {% endif %}
    
    ; --- Finalize and Reset ---
    M221 S100                                   ; reset flow to 100%
    M220 S100                                   ; reset speed to 100%
    SET_FILAMENT_SENSOR SENSOR=hotend_sensor ENABLE=1 ; re-enable filament sensor
    M117                                        ; clear LCD message
    _set_status STATE="status_ready"
    M106 S0                                     ; turn off part cooling fan

    ; --- Universal Chamber Light On (Green/White) ---
    {% if printer['neopixel Chamber_Light'] is defined %}
        SET_LED LED=Chamber_Light RED=0.0 GREEN=1.0 BLUE=0.0
    {% endif %}
    {% if printer['output_pin Chamber_Light'] is defined %}
        SET_PIN PIN=Chamber_Light VALUE=1
    {% endif %}
    
    ; --- Save the filament type for persistence ---
    SAVE_VARIABLE VARIABLE=gcode_macro.filament_material.type VALUE='"{printer["gcode_macro filament_material"].type}"'


[gcode_macro END_PRINT]
description: "A wrapper macro that simply calls PRINT_END."
gcode:
    PRINT_END { rawparams }

[gcode_macro CANCEL_PRINT]
description: "Cancels the print and performs a safe shutdown."
rename_existing: CANCEL_PRINT_BASE
gcode:
    CLEAR_PAUSE

    ; --- Retract filament to prevent oozing ---
    M400
    {% set retract_dist = printer["gcode_macro _CLIENT_VARIABLE"].cancel_retract|default(5.0)|float %}
    {% set retract_spd = printer["gcode_macro _CLIENT_VARIABLE"].speed_retract|default(30.0)|float %}
    G91
    G1 E-{retract_dist} F{retract_spd * 60}
    G90

    ; --- Clean nozzle if enabled ---
    {% if printer['gcode_macro _BRUSH_SETTINGS'] and printer['gcode_macro _BRUSH_SETTINGS'].enabled|lower == 'true' %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel}
        _set_status STATE="status_cleaning"
        CLEAN_NOZZLE
    {% endif %}

    ; --- Immediate Shutdown ---
    M104 S0                                     ; turn off hotend
    M140 S0                                     ; turn off bed
    _TOOLHEAD_PARK_PAUSE_CANCEL                 ; park toolhead
    M106 S0                                     ; turn off part fan
    UPDATE_DELAYED_GCODE ID=delayed_fan_shutoff DURATION=600 ; schedule electronics fan off

    ; --- Universal Chamber Light On (Red/White) ---
    {% if printer['neopixel Chamber_Light'] is defined %}
        SET_LED LED=Chamber_Light RED=1.0 GREEN=0.0 BLUE=0.0 ; Set to red for cancelled print
    {% elif printer['output_pin Chamber_Light'] is defined %}
        SET_PIN PIN=Chamber_Light VALUE=1 ; Turn on as an alert
    {% endif %}
    _set_status STATE="status_ready"
    CANCEL_PRINT_BASE                           ; execute Klipper's base CANCEL_PRINT

[gcode_macro PARK_REAR]
description: "Parks the toolhead at the rear of the bed."
gcode:
    G90
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x/2} Y{th.axis_maximum.y - 5} F6000

[gcode_macro PARK_FRONT]
description: "Parks the toolhead at the front of the bed."
gcode:
    G90
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x/2} Y{th.axis_minimum.y + 5} F6000

[gcode_macro RELAX_BELTS]
description: "Moves the toolhead around to relax the belts."
gcode:
    G90
    {% set th = printer.toolhead %}
    {% set margin = 10 %}
    G0 Z50
    G0 X{th.axis_maximum.x - margin} Y{th.axis_maximum.y - margin} F6000 
    G0 X{th.axis_minimum.x + margin} Y{th.axis_minimum.y + margin} F6000 
    G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2} F6000
    G0 X{th.axis_minimum.x + margin} F6000
    G0 X{th.axis_maximum.x - margin} F6000
    G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2} F6000
    G0 Y{th.axis_minimum.y + margin} F6000
    G0 Y{th.axis_maximum.y - margin} F6000
    G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2} F6000
    
[gcode_macro SHUTDOWN_PRINTER]
description: "Turns off all heaters, fans, and motors."
gcode:
    {% if "xyz" in printer.toolhead.homed_axes %}
        _TOOLHEAD_PARK_PAUSE_CANCEL
    {% endif %}
    TURN_OFF_HEATERS
    M106 S0
    {% if printer['neopixel Chamber_Light'] is defined %}
        SET_LED LED="Chamber_Light" RED=0 GREEN=0 BLUE=0
    {% endif %}
    {% if printer['neopixel toolhead_led'] is defined %}
        SET_LED LED="toolhead_led" RED=0 GREEN=0 BLUE=0
    {% endif %}
    M84
    _set_status STATE="status_off"

[gcode_macro HEATSOAK]
description: "Waits for the chamber to reach a target temp (with a timeout), then soaks with periodic updates."
gcode:
    ; --- Safety Check: Ensure the bed heater is active before starting ---
    {% if printer.heater_bed.target > 0 %}
        ; --- Read variables and parameters ---
        {% set chamber_config = printer['gcode_macro _CHAMBER_SETTINGS'] %}
        {% set target_temp = params.TEMP|default(chamber_config.target_temp)|int %}
        {% set timeout_minutes = params.TIMEOUT|default(chamber_config.heat_timeout_minutes)|int %}
        {% set soak_minutes = params.TIME|default(chamber_config.soak_duration_minutes)|int %}
        {% set timeout_ms = timeout_minutes * 60 * 1000 %}

        ; --- Heating Phase with Timeout ---
        _set_status STATE="status_heating"
        RESPOND MSG='{"----< waiting for chamber to reach %s c (max %s minutes)..." % (target_temp, timeout_minutes)}'
        
        ; Wait for the maximum specified time for the chamber to heat up
        G4 P{timeout_ms}

        ; --- Check Temperature and Proceed to Soak or Warn ---
        {% if printer['temperature_sensor Chamber'].temperature >= target_temp %}
            RESPOND MSG='{"----< chamber at temperature, beginning soak..."}'
            
            ; --- Soaking Phase with 1-minute updates ---
            {% for i in range(soak_minutes) %}
                {% set remaining_time = soak_minutes - i %}
                {% set current_temp = printer['temperature_sensor Chamber'].temperature|round(1) %}
                RESPOND MSG='{"----< soaking... %s minutes remaining. current temp: %s c" % (remaining_time, current_temp)}'
                G4 P60000 ; Wait for one minute
            {% endfor %}

            RESPOND MSG='{"----< chamber heat soak complete"}'
        {% else %}
            RESPOND MSG='{"----< warning: heat soak timed out, chamber only reached %s c" % printer["temperature_sensor Chamber"].temperature|round(1)}'
        {% endif %}

    {% else %}
        ; --- If bed heater is off, abort the macro ---
        RESPOND MSG='{"----< error: heatsoak cannot run without an active bed heater."}'
    {% endif %}


[gcode_macro MANUAL_SOAK]
description: "Heats the bed to a defined temp and turns on bed fans to pre-heat the chamber."
gcode:
    ; --- Read variables from settings ---
    {% set chamber_cfg = printer['gcode_macro _CHAMBER_SETTINGS'] %}
    {% set max_bed_temp = printer.configfile.settings.heater_bed.max_temp|int %}
    ; Use manual_soak_temp if defined, otherwise default to the bed's max_temp
    {% set target_temp = chamber_cfg.manual_soak_temp|default(max_bed_temp)|int %}

    RESPOND MSG='{"----< starting manual chamber heat soak..."}'

    ; --- Set bed temperature with safety check ---
    ; This check is still useful in case manual_soak_temp is manually set higher than max_temp
    {% if target_temp > max_bed_temp %}
        ; If the requested temp exceeds the max, warn the user and set to max
        RESPOND MSG='{"----< manual soak temp exceeds max bed temp. setting to max bed temp (%s c)" % max_bed_temp}'
        M140 S{max_bed_temp}
    {% else %}
        ; Otherwise, set to the requested temperature
        M140 S{target_temp}
    {% endif %}

    ; --- Turn on bed fans for circulation ---
    {% if printer['fan_generic Bed_Fans'] is defined %}
        RESPOND MSG='{"----< turning on bed fans"}'
        SET_FAN_SPEED FAN=Bed_Fans SPEED=1.0
    {% else %}
        RESPOND MSG='{"----< warning: bed_fans are not defined"}'
    {% endif %}

    
[gcode_macro BED_MESH_CALIBRATE]
description: "Wrapper for BED_MESH_CALIBRATE that first ensures the gantry is leveled."
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% if printer.configfile.settings.quad_gantry_level is defined and not printer.quad_gantry_level.applied %} 
        _set_status STATE="status_leveling"
        QUAD_GANTRY_LEVEL
        G28 Z
    {% elif printer.configfile.settings.z_tilt is defined and not printer.z_tilt.applied %} 
        _set_status STATE="status_leveling"
        Z_TILT_ADJUST
        G28 Z
    {% endif %}
    _BED_MESH_CALIBRATE {rawparams}
    _set_status STATE="status_ready"

[gcode_macro M900]
description: "Converts Marlin M900 G-code to Klipper's SET_PRESSURE_ADVANCE."
gcode:
    {% set pa = params.K|float %}
    SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro M600]
description: "Filament change command (invokes PAUSE)."
gcode:
    PAUSE X=10 Y=10 Z_MIN=50
    _set_status STATE="status_busy"

[gcode_macro PAUSE]
description: "Pauses the print, retracts, and smart parks the toolhead."
rename_existing: PAUSE_BASE
gcode:
    ; --- Pause print and save state ---
    RESPOND MSG='{"----< pausing print"}'
    PAUSE_BASE                            ; This command saves the position and state
    
    ; --- Retract filament ---
    {% set retract = printer["gcode_macro _CLIENT_VARIABLE"].retract|default(1.0)|float %}
    {% set speed = printer["gcode_macro _CLIENT_VARIABLE"].speed_retract|default(30.0)|float %}
    G91                                     ; Use relative positioning
    G1 E-{retract} F{speed * 60}            ; Retract filament
    G90                                     ; Return to absolute positioning

    ; --- Set Status Lights ---
    {% if printer['neopixel Chamber_Light'] is defined %}
        SET_LED LED=Chamber_Light RED=1.0 GREEN=1.0 BLUE=0.0 ; Set to yellow
    {% endif %}
    {% if printer['output_pin Chamber_Light'] is defined %}
        SET_PIN PIN=Chamber_Light VALUE=0.5 ; Dim to 50%
    {% endif %}

    ; --- Park toolhead using _TOOLHEAD_PARK_PAUSE_CANCEL ---
    _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: "Resumes the print after cleaning the nozzle."
rename_existing: RESUME_BASE
gcode:
    RESPOND MSG='{"----< resuming print"}'
    
    ; --- Un-retract filament to re-prime the nozzle ---
    {% set unretract = printer["gcode_macro _CLIENT_VARIABLE"].unretract|default(1.0)|float %}
    {% set speed = printer["gcode_macro _CLIENT_VARIABLE"].speed_unretract|default(30.0)|float %}
    G91                                     ; Use relative positioning
    G1 E{unretract} F{speed * 60}           ; Un-retract filament
    G90                                     ; Return to absolute positioning

    ; --- Clean the nozzle before continuing ---
    RESPOND MSG='{"----< cleaning nozzle..."}'
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel}
    CLEAN_NOZZLE

    ; --- Set status lights and run the original RESUME command ---
    _set_status STATE="status_printing"
    RESUME_BASE
    
[gcode_macro LOAD_FILAMENT]
description: "Loads filament with an optional purge bucket and nozzle clean."
gcode:
    ; --- Initialization ---
    {% set settings = printer["gcode_macro _CLIENT_VARIABLE"] %}
    {% set load_temp = settings.load_temp|float %}
    {% set load_speed = settings.load_feed_speed|float %}
    {% set load_fast_speed = settings.load_fast_speed|float %}
    {% set load_length = settings.load_length|float %}
    {% set purge_length = settings.purge_length|float %}
    {% set use_bucket = settings.use_purge_bucket|default(false)|lower == 'true' %}
    {% if use_bucket %}
        {% set purge_x = settings.purge_bucket_x|default(0)|float %}
        {% set purge_y = settings.purge_bucket_y|default(0)|float %}
        {% set purge_z = settings.purge_bucket_z|default(10)|float %}
    {% endif %}
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT_STATE

    ; --- Move to purge bucket (if enabled) ---
    {% if use_bucket %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            RESPOND MSG='{"----< homing required..."}'
            G28
        {% endif %}
        RESPOND MSG='{"----< moving to purge bucket..."}'
        G90
        G0 Z{purge_z + 20} F1800
        G0 X{purge_x} Y{purge_y} F6000
        G0 Z{purge_z} F1800
    {% endif %}
    
    ; --- Heat nozzle and wait ---
    RESPOND MSG='{"----< heating nozzle to %s c" % load_temp}'
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={load_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={load_temp}
    
    ; --- Disable sensors and wait for safe extrude temp ---
    RESPOND MSG='{"----< disabling filament sensors"}'
    SET_FILAMENT_SENSOR SENSOR=hotend_sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=extruder_sensor ENABLE=0
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={printer.configfile.settings.extruder.min_extrude_temp|default(170)|float}
    
    ; --- Pause for user to insert filament ---
    RESPOND MSG='{"----< please insert filament now, then resume"}'
    PAUSE
    
    ; --- Load and purge filament ---
    RESPOND MSG='{"----< loading filament..."}'
    M83 ; set to relative extrusion
    G1 E{load_length - purge_length} F{load_fast_speed * 60}
    G1 E{purge_length} F{load_speed * 60}
    
    ; --- Clean nozzle ---
    RESPOND MSG='{"----< cleaning nozzle..."}'
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel}
    CLEAN_NOZZLE
    
    ; --- Park toolhead ---
    RESPOND MSG='{"----< parking toolhead..."}'
    _TOOLHEAD_PARK_PAUSE_CANCEL
    
    ; --- Finalize ---
    RESPOND MSG='{"----< filament load complete"}'
    RESPOND MSG='{"----< enabling filament sensors"}'
    SET_FILAMENT_SENSOR SENSOR=hotend_sensor ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=extruder_sensor ENABLE=1
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT_STATE

[gcode_macro UNLOAD_FILAMENT]
description: "Unloads filament with advanced tip forming."
gcode:
    ; --- Initialization ---
    {% set settings = printer["gcode_macro _CLIENT_VARIABLE"] %}
    {% set unload_temp = settings.unload_temp|float %}
    {% set unload_fast_speed = settings.unload_fast_speed|float %}
    {% set unload_length = settings.unload_length|float %}
    {% set tip_cycles = settings.tip_forming_cycles|default(5)|int %}
    {% set tip_move_length = settings.tip_forming_move_length|default(5)|float %}
    {% set tip_move_speed = settings.tip_forming_move_speed|default(25.0)|float %}
    SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_STATE
    
    ; --- Heat nozzle and wait ---
    RESPOND MSG='{"----< heating nozzle to %s c" % unload_temp}'
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={unload_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={unload_temp}
    
    ; --- Disable sensors and wait for safe extrude temp ---
    RESPOND MSG='{"----< disabling filament sensors"}'
    SET_FILAMENT_SENSOR SENSOR=hotend_sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=extruder_sensor ENABLE=0
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={printer.configfile.settings.extruder.min_extrude_temp|default(170)|float}
    
    ; --- Form filament tip ---
    RESPOND MSG='{"----< forming filament tip..."}'
    M83 ; set to relative extrusion
    {% for i in range(tip_cycles) %}
        G1 E{tip_move_length} F{tip_move_speed * 60}
        G1 E-{tip_move_length} F{tip_move_speed * 60}
    {% endfor %}
    
    ; --- Retract filament ---
    RESPOND MSG='{"----< unloading filament..."}'
    G1 E-{unload_length} F{unload_fast_speed * 60}

    ; --- Finalize ---
    RESPOND MSG='{"----< filament unload complete"}'
    RESPOND MSG='{"----< enabling filament sensors"}'
    SET_FILAMENT_SENSOR SENSOR=hotend_sensor ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=extruder_sensor ENABLE=1
    RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_STATE

[gcode_macro SEARCH_VARS]
description: "A debugging tool to search for Klipper printer object variables."
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}
        {% endif %} 
        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 
        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}
                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 
                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }
                    {% endif %} 
                {% endif %}
            {% endfor %}
        {% endif %} 
    {% endfor %}

[gcode_macro TAP_DATA]
description: "A utility macro to collect data from the Cartographer probe."
gcode:
    G28
    G1 Z5 F1200
    M400
    G4 P1000
    CARTOGRAPHER_STREAM FILENAME=tapdata2mms.csv
    G1 Z-0.5 F120
    M400
    G4 P1000
    CARTOGRAPHER_STREAM FILENAME=tapdata2mms.csv
    G1 Z5 F1200
    G28
    G1 Z5 F1200
    M400
    G4 P1000
    CARTOGRAPHER_STREAM FILENAME=tapdata3mms.csv
    G1 Z-0.5 F200
    M400
    G4 P1000
    CARTOGRAPHER_STREAM FILENAME=tapdata3mms.csv
    G1 Z10 F800